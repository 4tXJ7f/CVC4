To understand the new proof infrastructre:

PfRule <=> Kind
https://github.com/ajreynol/CVC4/blob/stringsPf/src/expr/proof_rule.h
ProofNode <=> Node
https://github.com/ajreynol/CVC4/blob/stringsPf/src/expr/proof_node.h
ProofRuleChecker <=> custom theory type checker
ProofChecker <=> TypeChecker
https://github.com/ajreynol/CVC4/blob/stringsPf/src/expr/proof_checker.h
ProofNodeManager <=> NodeManager
https://github.com/ajreynol/CVC4/blob/stringsPf/src/expr/proof_node_manager.h
CDProof
https://github.com/ajreynol/CVC4/blob/stringsPf/src/expr/proof.h

// OutputChannel

TrustNode
https://github.com/ajreynol/CVC4/blob/stringsPf/src/theory/trust_node.h
ProofGenerator
EagerProofGenerator
https://github.com/ajreynol/CVC4/blob/stringsPf/src/theory/proof_generator.h

// EqualityEngine

ProofEqEngine <=> EqualityEngine
https://github.com/ajreynol/CVC4/blob/stringsPf/src/theory/uf/proof_equality_engine.h

ProofOutputChannel <=> OutputChannel
https://github.com/ajreynol/CVC4/blob/stringsPf/src/theory/proof_output_channel.h



// Specific checkers and proof_kinds

https://github.com/ajreynol/CVC4/blob/stringsPf/src/theory/builtin/proof_checker.h
https://github.com/ajreynol/CVC4/blob/stringsPf/src/theory/builtin/proof_kinds

https://github.com/ajreynol/CVC4/blob/stringsPf/src/theory/booleans/proof_checker.h
https://github.com/ajreynol/CVC4/blob/stringsPf/src/theory/booleans/proof_kinds

https://github.com/ajreynol/CVC4/blob/stringsPf/src/theory/uf/proof_checker.h
https://github.com/ajreynol/CVC4/blob/stringsPf/src/theory/uf/proof_kinds

High level changes needed:

- TheoryEngine passes a ProofOutputChannel to each Theory instead of an OutputChannel when in proof producing mode. It uses this object to extract proofs for theory lemmas when needed.
- TheoryEngine owns a ProofChecker that can check any kind of proof in proof_kinds files.
- Based on proof_kinds, we auto-generate:
(1) The PfRule enumeration,
(2) Printing for PfRule,
(3) Initialization of the ProofChecker owned by TheoryEngine.

Notes:
- Theory does not need to be concerned what a ProofNode is. It uses TrustNodes but doesnt care about their contents.
- Similar to above, the user of a ProofEqEngine does not care about what a ProofNode is. Its input interface is similar to EqualityEngine, i.e. Node, its output interface is in terms of TrustNode.
- Theory can have as many ProofGenerator objects as it wants.
- ProofNodeManager does not need to be global.
