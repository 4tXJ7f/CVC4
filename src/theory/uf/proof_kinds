
//=============================== Core


// ======== Reflexive
// Children: none
// Arguments: (t)
// ---------------------
// Conclusion: (= t t)
proofrule REFL 0 1 ::CVC4::theory::uf::EqProofRuleChecker

// ======== Symmetric
// Children: (P:(= t1 t2))
// Arguments: none
// -----------------------
// Conclusion: (= t2 t1)
proofrule SYMM 1 0 ::CVC4::theory::uf::EqProofRuleChecker

// ======== Transitivity
// Children: (P1:(= t1 t2), ..., Pn:(= t{n-1} tn))
// Arguments: none
// -----------------------
// Conclusion: (= t1 tn)
proofrule TRANS 2: 0 ::CVC4::theory::uf::EqProofRuleChecker

// ======== Congruence  (subsumed by Substitute?)
// Children: (P1:(= t1 s1), ..., Pn:(= tn sn))
// Arguments: (f)
// ---------------------------------------------
// Conclusion: (= (f t1 ... tn) (f s1 ... sn))
proofrule CONG 0: 1 ::CVC4::theory::uf::EqProofRuleChecker

//=============================== Boolean conversion

// ======== True intro
// Children: (P:F)
// Arguments: none
// ----------------------------------------
// Conclusion: (= F true)
proofrule TRUE_INTRO 1 0 ::CVC4::theory::uf::EqProofRuleChecker

// ======== True elim
// Children: (P:(= F true)
// Arguments: none
// ----------------------------------------
// Conclusion: F
proofrule TRUE_ELIM 1 0 ::CVC4::theory::uf::EqProofRuleChecker

// ======== False intro
// Children: (P:(not F))
// Arguments: none
// ----------------------------------------
// Conclusion: (= F false)
proofrule FALSE_INTRO 1 0 ::CVC4::theory::uf::EqProofRuleChecker

// ======== False elim
// Children: (P:(= F false)
// Arguments: none
// ----------------------------------------
// Conclusion: (not F)
proofrule FALSE_ELIM 1 0 ::CVC4::theory::uf::EqProofRuleChecker


//=============================== Common macros

// ======== Equality by substitution + rewriting
// Children: (P1:(= x1 t1), ..., Pn:(= xn tn))
// Arguments: (t,s)
// -------------------
// Conclusion: (= t s)
// In other words, t and s can be show equal by substitution + rewriting.
macro MACRO_EQ_SUBS_REWRITE 0: 2 {
  (TRANS (SUBS_REWRITE <children> <args>[0]) (SYMM (SUBS_REWRITE <children> <args>[1])))
}
